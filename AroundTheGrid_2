#pragma config(Sensor, S3,     lightSensor,    sensorEV3_Color)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

const tSensors lightSensor = (tSensors) S3;


#define COL 10
#define ROW 7

//declare prototype
void write_file(void);

task main()
{
	long fileHandle;
	int grid2[70];
	int grid[ROW][COL]={0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,
		0,0,0,0,0,0,0};


	int column=1;
        int condition = 1;
        int condition_2 = 1;
				while(column !=10)
				{
        while(condition == 1)
        {

                while(SensorValue(lightSensor) >= 46) //while on WHITE
                  {
				//go straight
                                motor(motorB)=30;
                          			motor(motorC)=30;
                  }
          if(nMotorEncoder(motorB) < 25)
                  {
                          condition = 0;
                  }

          while(SensorValue(lightSensor) < 46) // while on BLACK
                  {
			//go straight
                          motor(motorB)=30;
                          motor(motorC)=30;

                          nMotorEncoder(motorB) = 0;
                  }
        }
        if(cond2 == 1)
		{
	//reverse
        setMotorSync(motorB, motorC, 0, -30);
        wait1Msec(400);

	//stop
        setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

	//turn
        setMotorSync(motorB, motorC, 50, 30);
        wait1Msec(1100);
	
	//stop
        setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

	//straight
        setMotorSync(motorB, motorC, 0, 30);
        wait1Msec(200);

	//stop
        setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);
	
	//turn
        setMotorSync(motorB, motorC, 50, 30);
        wait1Msec(1100);
	
	//stop
        setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

        condition_2 = 0;
        col++;
      }//end if
      else
      {
	
	//reverse
      	setMotorSync(motorB, motorC, 0, -30);
        wait1Msec(400);

	//stop
         setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

	//turn
        setMotorSync(motorB, motorC, -50, 30);
        wait1Msec(1100);

	//stop
          setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

	//straight
        setMotorSync(motorB, motorC, 0, 30);
        wait1Msec(200);

	//stop
          setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

	//turn
        setMotorSync(motorB, motorC, -50, 30);
        wait1Msec(1100);

	//stop
          setMotorSync(motorB, motorC, 0, 0);
        wait1Msec(500);

        condition_2 = 1;
        column++;
      }//end else

        condition = 1;

      }//end while


	write_file();


}//end main


void write_file()
{
	//fillt the data in grid2
         for (int i = 0; i < 70; i++)
   {
      fileWriteChar(fileHandle, grid2[i]);
   }//end for 

//close file
  fileClose(fileHandle);
}
