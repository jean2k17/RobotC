#pragma config(Sensor, S1,     lightSensor,    sensorEV3_Color)
#pragma config(Motor,  motorB,          left,          tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorC,          right,         tmotorEV3_Large, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


#define ROW 10
#define COL 7
#define THRESHOLD 10//threshold value
#define TURN 710//how long it turns for
#define SLIGHT 250//slight movement to help with the turn
#define NUM 70


//prototype
void write_file(void);


task main()
{
	//declare the grid
	int grid[ROW][COL]=	{
											{0,0,0,0,0,0,0,0,0,0},
											{0,0,0,0,0,0,0,0,0,0},
											{0,0,0,0,0,0,0,0,0,0},
											{0,0,0,0,0,0,0,0,0,0},
											{0,0,0,0,0,0,0,0,0,0},
											{0,0,0,0,0,0,0,0,0,0},
											{0,0,0,0,0,0,0,0,0,0}
				};//0 is white and 1 is black

	
	//declare the variables
	int condition = 1;
	int i;
	int square;
	int black_square;
	int white_square;
	i = square = black_sqaure = white_square = 0;

	//while condition is 1
	while(condition == 1)
	{

		while(SensorValue(lightSensor) >= THRESHOLD) //while on WHITE
	 		{
				setMotorSync(left, right, 0, 30);//going straight
	 		}//enf while
	 	if(nMotorEncoder(motorB) < 90)//if motor rotates less than 90
	 		{
	 			condition = 0;
	 		}//end if

	 	while(SensorValue(lightSensor) < THRESHOLD) // while on BLACK
	 		{
	 			setMotorSync(left, right, 0, 30);//going straight
	 			nMotorEncoder(left) = 0;
	 		}//end while
	}//end while


	
	for(i=0; i<NUM; i++)
	{
		//increment the square passed
		square++;

		if(SensorValue(lightSensor) >10)//WHITE
		{
			white_square++;
		}//end if
		else
		{
			black_square++;
		}//end else

		//display the squares, white and black squares
		displayBigTextLine(1, "%d squares", sqaure);
		displayBigTextLine(3, "%d white Square", white_square);
		displayBigTextLine(5, "%d black Square", black_square);

		//go straight
		setMotorSync(left, right, 0, 30);
		wait1Msec(1050);

		//stop
		setMotorSync(left, right, 0, 0);
		wait1Msec(200);

		if(square==7||square==21||square==35||square==49||square==63)//turn right
		{
				//turn
				motor[motorB] = 50;
				motor[motorC] = 0;
				wait1Msec(TURN);

				//slightly forward to help with turn
				setMotorSync(left, right, 0, 30);
				wait1Msec(SLIGHT);

				motor[motorB] = 50;
				motor[motorC] = 0;
				wait1Msec(TURN);
		}//end if
			if(square==14||square==28||square==42||square==54)//turn left
		{
				//turn
				motor[motorB] = 0;
				motor[motorC] = 50;
				wait1Msec(TURN);

				setMotorSync(left, right, 0, 30);
				wait1Msec(SLIGHT);

				//turn
				motor[left] = 0;
				motor[right] = 50;
				wait1Msec(TURN);

		}//end if
	}//end for
	write_file();

}//end main



void write_file()
{
		int j, i;
		j = i = 0;

		//create a file called grid
		string filename = "grid";

		long  fileHandle;

		//open the file
		fileHandle = fileOpenWrite(grid);

		//read in the data
		for(i = 0; i < ROWS; i++)
		{
				for(j = 0; j < COLUMNS; j++)
				{
						short fileWriteInt = grid[i][j];
				}//end inner for
		}//end outer for

		//close the file
		fileClose(fileHandle);
}//end write_file

