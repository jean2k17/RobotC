#pragma config(Sensor, S1,     touch,          sensorEV3_Touch)
#pragma config(Sensor, S4,     sonar,          sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     light,          sensorEV3_Color)
#pragma config(Motor,  motorB,          left,          tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          right,         tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define POWR 30	//power of the motors
#define NINETY 206
#define ROWS 10		//declare rows
#define COLUMNS 7	//declare columns


short grid[ROWS][COLUMNS]= {		{0,0,0,0,0,0,0,0,0,0},
																{0,0,0,0,0,0,0,0,0,0},
																{0,0,0,0,0,0,0,0,0,0},
																{0,0,0,0,0,0,0,0,0,0},
																{0,0,0,0,0,0,0,0,0,0},
																{0,0,0,0,0,0,0,0,0,0},
																{0,0,0,0,0,0,0,0,0,0}

												};//the rows and columns, 0 = white, 1 = black


//declare prototypes
void traverse(short T);
void back(short T);
void write_file();
short findThreshold();
int corner(int c, short T);
void straight(short T);
//void part2(short T);




task main()
{
		//declare variables
    short T = 0;
    int j, i;

		//read in the rows and columns
    for(i = 0; i < COLUMNS; i++)
    {
    		for(j = 0; j < ROWS; j++)
    		{
    				grid[j][i] = 0;

    		}//end inner for()

    }//end outter for()

		//pass to find a threshold fucntion and return the value as T
    T = findThreshold();

		//pass to traverse function with the threshold value T
		traverse(T);

		while(getTouchValue(S1) == 0)//while its not touching
		{
			displayBigStringAt(0,15,"Hold for over 3 sec");

		}//end while

		clearTimer(T1);

		while(getTouchValue(S1) == 1)
		{
				displayBigStringAt(0,15,"Hold for over 3 sec");

				if(time1(T1) == 3000)
				{
					//	part2(T);
				}//end if
		}//end while

}//end main task()




//traverse Function
void traverse(short T)
{
		//declare the variables
		int j;
		int column;
		int row;
		int s;
		int c;

		//set the variables to 0
		j = column = row = s = c = 0;

		//set the counter to 1
		int counter = 1;


		while(j != 1)	//while j is not equal to 1
		{
			//reset the left motorencoder
		   resetMotorEncoder(left);

			 while(SensorValue(light) > T)//while the light value is greater than the threshold = while white
		   {
					//set motor going straight
					motor[left] = POWR;
       		motor[right] = POWR;

					//set counter to 0
					counter=0;

					//reset the right motorencoder
					resetMotorEncoder(right);
			 }

		   if(counter == 0)//counter = 0
		 	 {

					s++;
					counter = 1;

					if(getMotorEncoder(left) < 40)
          {
          	//pass to back function = reverse
          	  back(T);

          	  //reset both motorencoders
        			resetMotorEncoder(left);
    					resetMotorEncoder(right);

    					////turns right
    					setMotorSyncEncoder(left, right, 100, NINETY, POWR);

        		  s = s-3;                                  //after going back
       				displayBigStringAt(0,15,"%d",s);
       				wait1Msec(1500);

       				//increment j
       				j++;
          }//end if
	  	 }//end if

	  	 if(getMotorEncoder(right) > 100 && counter != 2)
  		 {
  				s++;
  				counter = 2;
			 }//end if

			//straight
			 motor[left] = POWR;
			 motor[right] = POWR;
    }

		while(c < 10)              //start traverse!!!!!!!!!!!!!!!!!!!
    {
    	//reset left motorencoder
       resetMotorEncoder(left);

			 while(SensorValue(light) > T) //while on WHITE
		   {
		     //going straight
					motor[left] = POWR;
       		motor[right] = POWR;

					counter=0;
			 }

		   if(counter == 0)
		 	 {
					row++;

					if(getMotorEncoder(left) < 40)//if the motorencoder rotates less that 40
          {
          	//back function = reverse
          	  back(T);

          	  //pass to corner function
        			c = corner(c, T);

        			//straight
        			straight(T);

        			//corner
        			c = corner(c, T);
       				displayBigStringAt(0,15,"%d",s);
       				wait1Msec(1500);
          }
	  	 }
			 counter = 1;

			 //going straight
			 motor[left] = POWR;
			 motor[right] = POWR;
    }//end loop

    s = c/2 - s;

    //reset both motorencoders
    resetMotorEncoder(left);
   	resetMotorEncoder(right);

   	//turns right
    setMotorSyncEncoder(left, right, -100, NINETY, POWR);

    //turns right
    setMotorSyncEncoder(left, right, -100, 2*NINETY, POWR);

    //pass to straight function
    straight(T);

    //back function = reverse
    back(T);

    //reset both motors
    resetMotorEncoder(left);
   	resetMotorEncoder(right);

  	 //turns right
    setMotorSyncEncoder(left, right, -100, NINETY, POWR);

    counter = 1;
		j = 0;

		while(j < s)//while j is less than s
    {
    	//reset left motorencoder
       resetMotorEncoder(left);

			 while(SensorValue(light) > T)//while on WHITE
		   {
		     //straight
					motor[left] = POWR;
       		motor[right] = POWR;

					counter=0;
			 }//end while

		   if(counter == 0 && getMotorEncoder(left) < 40)//while left encoder is less than 40
		 	 {
     			j++;
	  	 }//end if
			 counter = 1;

			 //go straight
			 motor[left] = POWR;
			 motor[right] = POWR;

    }//end while loop
}//end traverse()



//goes until double line
void straight(short T)
{
		int count = 1;
		int j = 0;

		while(j == 1)
    {
    	//reste left encoder
       resetMotorEncoder(left);

			 while(SensorValue(light) > T)//WHITE
		   {
		     //straight
					motor[left] = POWR;
       		motor[right] = POWR;

					count=0;
			 }

		   if(count == 0 && getMotorEncoder(left) < 40)
		 	 {
     			j++;
	  	 }
			 count = 1;

			 //straight
			 motor[left] = POWR;
			 motor[right] = POWR;

    }//end loop
}//end straight




//find threshold
short findThreshold()
{
	short maximum;
	short minimum;
	short num;

	while(getTouchValue(S1) == 0)//while not touching anything
	{
		//read in colour
		maximum = getColorReflected(S3);

	}//end while

	if(getTouchValue(S1) == 1)//if touches something
	{
		//stop for 5 seconds
		wait1Msec(500);
	}//end if

	while(getTouchValue(S1) == 0)//while not touching something
	{
		//read in colour
		minimum = getColorReflected(S3);
	}//end while

	//calculate the threshold = average
	num = maximum + minimum;
	num = num/2;

	//display the threshold
	displayBigStringAt(15,15,"%d",num);
	wait1Msec(3000);

	//return the threshold to main
	return(num);
}//end findthreshold




//calculate the corner
int corner(int c, short T)
{
    if(c%4 == 0 || c%4 == 1)//left
    {
    	//reset both motorencoders
    		resetMotorEncoder(left);
    		resetMotorEncoder(right);

    		//turns right
    		setMotorSyncEncoder(left, right, -100, NINETY, POWR);
    		c++;
    		//return the number of the corner
    		return(c);
    }//end if

    if(c%4 == 2 || c%4 == 3)//right
    {
    	//reset both motorencoders
    		resetMotorEncoder(left);
    		resetMotorEncoder(right);

    		//turns right
    		setMotorSyncEncoder(left, right, 100, NINETY, POWR);
    		c++;
    		//return the number of the corner
    		return(c);
  	}//end if
}//end corner



//reverse
void back(short T)
{
	  int count;
	  int j;

	  count = j = 0;

		while(j < 3)       //BACKWORDS
  	{
  		//reset left motorencoder
    		resetMotorEncoder(left);

				while(SensorValue(light) > T)//while on WHITE
		   	{
		   		//reverse
						motor[left] = -POWR;
       		  motor[right] = -POWR;

						count=0;
				}

		   	if(count == 0)//if counter is 0
		 	 	{
		 	 		//increment the j
		 				j++;
	  		}
				count = 1;

				//reverse
				motor[left] = -POWR;
			 	motor[right] = -POWR;
    }//end BACKWORD loop
}




void write_file()
{
		int j, i;
		j = i = 0;

		//create a file called grid
		string filename = "grid";

		long  fileHandle;

		//open the file
		fileHandle = fileOpenWrite(grid);

		//read in the data
		for(i = 0; i < ROWS; i++)
		{
				for(j = 0; j < COLUMNS; j++)
				{
						short fileWriteInt = grid[i][j];
				}//end inner for
		}//end outer for

		//close the file
		fileClose(fileHandle);
}//end write_file
